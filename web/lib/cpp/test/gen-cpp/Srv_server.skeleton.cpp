// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "Srv.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using namespace  ::thrift::test::debug;

class SrvHandler : virtual public SrvIf {
 public:
  SrvHandler() {
    // Your initialization goes here
  }

  int32_t Janky(const int32_t arg) {
    // Your implementation goes here
    printf("Janky\n");
  }

  void voidMethod() {
    // Your implementation goes here
    printf("voidMethod\n");
  }

  int32_t primitiveMethod() {
    // Your implementation goes here
    printf("primitiveMethod\n");
  }

  void structMethod(CompactProtoTestStruct& _return) {
    // Your implementation goes here
    printf("structMethod\n");
  }

  void methodWithDefaultArgs(const int32_t something) {
    // Your implementation goes here
    printf("methodWithDefaultArgs\n");
  }

  void onewayMethod() {
    // Your implementation goes here
    printf("onewayMethod\n");
  }

  bool declaredExceptionMethod(const bool shouldThrow) {
    // Your implementation goes here
    printf("declaredExceptionMethod\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  ::apache::thrift::stdcxx::shared_ptr<SrvHandler> handler(new SrvHandler());
  ::apache::thrift::stdcxx::shared_ptr<TProcessor> processor(new SrvProcessor(handler));
  ::apache::thrift::stdcxx::shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  ::apache::thrift::stdcxx::shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  ::apache::thrift::stdcxx::shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

