/**
 * Autogenerated by Thrift Compiler (1.0.0-dev)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "EnumTest_constants.h"



const EnumTestConstants g_EnumTest_constants;

EnumTestConstants::EnumTestConstants() {
  ENUM_TEST.a_enum = (MyEnum3::type)1;
  ENUM_TEST.__isset.a_enum = true;
  std::vector<MyEnum3::type>  tmp137;
  tmp137.push_back((MyEnum3::type)1);
  tmp137.push_back((MyEnum3::type)0);
  tmp137.push_back((MyEnum3::type)-2);

  ENUM_TEST.enum_list = tmp137;
  ENUM_TEST.__isset.enum_list = true;
  std::set<MyEnum3::type>  tmp138;
  tmp138.insert((MyEnum3::type)1);
  tmp138.insert((MyEnum3::type)-1);

  ENUM_TEST.enum_set = tmp138;
  ENUM_TEST.__isset.enum_set = true;
  std::map<MyEnum3::type, MyEnum3::type>  tmp139;
  tmp139.insert(std::make_pair((MyEnum3::type)1, (MyEnum3::type)0));
  tmp139.insert(std::make_pair((MyEnum3::type)0, (MyEnum3::type)1));

  ENUM_TEST.enum_enum_map = tmp139;
  ENUM_TEST.__isset.enum_enum_map = true;
  std::map<std::vector<MyEnum3::type> , MyEnum3::type>  tmp140;
  std::vector<MyEnum3::type>  tmp141;
  tmp141.push_back((MyEnum3::type)1);
  tmp141.push_back((MyEnum3::type)0);

  tmp140.insert(std::make_pair(tmp141, (MyEnum3::type)0));
  std::vector<MyEnum3::type>  tmp142;
  tmp142.push_back((MyEnum3::type)1);

  tmp140.insert(std::make_pair(tmp142, (MyEnum3::type)0));
  std::vector<MyEnum3::type>  tmp143;
  tmp143.push_back((MyEnum3::type)0);

  tmp140.insert(std::make_pair(tmp143, (MyEnum3::type)1));

  ENUM_TEST.list_enum_map = tmp140;
  ENUM_TEST.__isset.list_enum_map = true;
  std::map<std::set<MyEnum3::type> , MyEnum3::type>  tmp144;
  std::set<MyEnum3::type>  tmp145;
  tmp145.insert((MyEnum3::type)1);
  tmp145.insert((MyEnum3::type)0);

  tmp144.insert(std::make_pair(tmp145, (MyEnum3::type)0));
  std::set<MyEnum3::type>  tmp146;
  tmp146.insert((MyEnum3::type)1);

  tmp144.insert(std::make_pair(tmp146, (MyEnum3::type)0));

  ENUM_TEST.set_enum_map = tmp144;
  ENUM_TEST.__isset.set_enum_map = true;
  std::map<std::map<MyEnum3::type, MyEnum3::type> , MyEnum3::type>  tmp147;
  std::map<MyEnum3::type, MyEnum3::type>  tmp148;
  tmp148.insert(std::make_pair((MyEnum3::type)-1, (MyEnum3::type)10));

  tmp147.insert(std::make_pair(tmp148, (MyEnum3::type)1));

  ENUM_TEST.map_enum_map = tmp147;
  ENUM_TEST.__isset.map_enum_map = true;
  std::map<MyEnum3::type, std::map<MyEnum3::type, MyEnum3::type> >  tmp149;
  std::map<MyEnum3::type, MyEnum3::type>  tmp150;
  tmp150.insert(std::make_pair((MyEnum3::type)1, (MyEnum3::type)1));

  tmp149.insert(std::make_pair((MyEnum3::type)-1, tmp150));

  ENUM_TEST.enum_map_map = tmp149;
  ENUM_TEST.__isset.enum_map_map = true;
  std::map<MyEnum3::type, std::set<MyEnum3::type> >  tmp151;
  std::set<MyEnum3::type>  tmp152;
  tmp152.insert((MyEnum3::type)1);
  tmp152.insert((MyEnum3::type)-1);

  tmp151.insert(std::make_pair((MyEnum3::type)-2, tmp152));
  std::set<MyEnum3::type>  tmp153;
  tmp153.insert((MyEnum3::type)1);
  tmp153.insert((MyEnum3::type)-1);

  tmp151.insert(std::make_pair((MyEnum3::type)10, tmp153));

  ENUM_TEST.enum_set_map = tmp151;
  ENUM_TEST.__isset.enum_set_map = true;
  std::map<MyEnum3::type, std::vector<MyEnum3::type> >  tmp154;
  std::vector<MyEnum3::type>  tmp155;
  tmp155.push_back((MyEnum3::type)10);

  tmp154.insert(std::make_pair((MyEnum3::type)1, tmp155));
  std::vector<MyEnum3::type>  tmp156;
  tmp156.push_back((MyEnum3::type)9);
  tmp156.push_back((MyEnum3::type)10);

  tmp154.insert(std::make_pair((MyEnum3::type)0, tmp156));

  ENUM_TEST.enum_list_map = tmp154;
  ENUM_TEST.__isset.enum_list_map = true;

}



